name: Build k2eg with CMake

on: 
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
    check-changed-file:
      runs-on: ubuntu-latest
      name: Test changed source file
      outputs:
        source_changed: ${{ steps.changed-src.outputs.any_changed }}
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 2
        - name: Get changed files in the source folder
          id: changed-src
          uses: tj-actions/changed-files@v35
          with:
            files: |
              CMakeLists.txt
              src/**
              test/**
        - name: Set Buil Bullseye to success
          if: steps.changed-src.outputs.any_changed == 'false'
          uses: ouzi-dev/commit-status-updater@v2
          with:
            name: Buil Bullseye
            status: success
        - name: Set Test Ubuntu Kinetic / test_build to success
          if: steps.changed-src.outputs.any_changed == 'false'
          uses: ouzi-dev/commit-status-updater@v2
          with:
            name: Test Bullseye / test_build
            status: success
        - name: Set Build Ubuntu Kinetic to success
          if: steps.changed-src.outputs.any_changed == 'false'
          uses: ouzi-dev/commit-status-updater@v2
          with:
            name: Build Ubuntu Kinetic
            status: success
        - name: Set Test Ubuntu Kinetic / test_build to success
          if: steps.changed-src.outputs.any_changed == 'false'
          uses: ouzi-dev/commit-status-updater@v2
          with:
            name: Test Ubuntu Kinetic / test_build
            status: success
    test_debian_bullseye:
      name: Test Bullseye
      needs: [build_debian_bullseye] 
      uses: ./.github/workflows/test.yml
      with:
        build_image: ${{ needs.build_debian_bullseye.outputs.build_image }}
        artifact_name: ${{ needs.build_debian_bullseye.outputs.artifact_name }}
        docker_compose_profile: app-debian
      secrets: inherit
    build_debian_bullseye:
        name: Build Bullseye
        needs: check-changed-file
        if: needs.check-changed-file.outputs.source_changed == 'true'
        runs-on: ubuntu-latest
        container: scr.svc.stanford.edu/eed-public/build-image/cpp-build-image/gcc-debian:12.2.0-bullseye
        env:
          BUILD_IMAGE: scr.svc.stanford.edu/eed-public/build-image/cpp-build-image/gcc-debian:12.2.0-bullseye
          ARTIFACT_NAME: artifact-gcc-debian-12-2-0-bullseye
          BUILD_TYPE: Debug
          
        outputs:
          build_image: ${{ env.BUILD_IMAGE }}
          artifact_name: ${{ env.ARTIFACT_NAME}}  

        steps:
            - name: Checkout source code
              uses: actions/checkout@v3
            - name: Restore cached build directory
              id: cache-build-restore
              uses: actions/cache@v3
              with:
               path: build
               key: debian-bullseye-${{ hashFiles('CMakeLists.txt') }}
            - name: Configure CMake
              # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
              # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_ASAN=1
            - name: Build
              # Build your program with the given configuration
              run: cmake --build build --config ${{env.BUILD_TYPE}} --target install
            - name: Get log on failure
              if: ${{ failure() }}
              uses: actions/upload-artifact@v3
              with:
                name: ${{env.ARTIFACT_NAME}}-log
                path: build/**/*.log
                retention-days: 1
            - name: Archive artifacts
              uses: actions/upload-artifact@v3
              with:
                name: ${{env.ARTIFACT_NAME}}
                path: |
                    build/local/lib
                    build/local/bin
                retention-days: 1
            - uses: ouzi-dev/commit-status-updater@v2
              with:
                status: success
    test_ubuntu_kinetic:
      name: Test Ubuntu Kinetic
      needs: [build_ubuntu_kinetic] 
      uses: ./.github/workflows/test.yml
      with:
        build_image: ${{ needs.build_ubuntu_kinetic.outputs.build_image }}
        artifact_name: ${{ needs.build_ubuntu_kinetic.outputs.artifact_name }}
        docker_compose_profile: app-ubuntu
      secrets: inherit
    build_ubuntu_kinetic:
        name: Build Ubuntu Kinetic
        needs: check-changed-file
        if: needs.check-changed-file.outputs.source_changed == 'true'
        runs-on: ubuntu-latest
        container: docker.io/ubuntu:kinetic
        env:
          BUILD_IMAGE: ubuntu:kinetic
          ARTIFACT_NAME: artifact-gcc-ubuntu-kinetic
          BUILD_TYPE: Debug
          
        outputs:
          build_image: ${{ env.BUILD_IMAGE }}
          artifact_name: ${{ env.ARTIFACT_NAME}}  

        steps:
            - name: Setup bild system
              run: |
                export DEBIAN_FRONTEND=noninteractive
                apt update
                apt install -y build-essential cmake git tclsh ninja-build lcov libssl-dev curl libcurl4-openssl-dev
            - name: Checkout source code
              uses: actions/checkout@v3
            - name: Restore cached build directory
              id: cache-build-restore
              uses: actions/cache@v3
              with:
               path: build
               key: ubuntu-kinetic-${{ hashFiles('CMakeLists.txt') }}
            - name: Configure CMake
              run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_ASAN=1
            - run: git config --global --add safe.directory '*'
            - name: Build
              run: cmake --build build --config ${{env.BUILD_TYPE}} --target install
            - name: Get log on failure
              if: ${{ failure() }}
              uses: actions/upload-artifact@v3
              with:
                name: ${{env.ARTIFACT_NAME}}-log
                path: build/**/*.log
                retention-days: 1
            - name: Archive artifacts
              uses: actions/upload-artifact@v3
              with:
                name: ${{env.ARTIFACT_NAME}}
                path: |
                    build/local/lib
                    build/local/bin
                retention-days: 1
            - name: Set job status
              uses: ouzi-dev/commit-status-updater@v2
              with:
                status: success
    manage_version:
      needs: [test_debian_bullseye, test_ubuntu_kinetic]
      name: Manage version
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - uses: paulhatch/semantic-version@v5.0.2
          id: tag_version_develop 
          with:
            # The prefix to use to identify tags
            tag_prefix: "v"
            # A string which, if present in a git commit, indicates that a change represents a
            # major (breaking) change, supports regular expressions wrapped with '/'
            major_pattern: "(MAJOR)"
            # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
            major_regexp_flags: ""
            # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
            minor_pattern: "(MINOR)"
            # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
            minor_regexp_flags: ""
            # A string to determine the format of the version output
            version_format: "${major}.${minor}.${patch}-prerelease${increment}"
            # Optional path to check for changes. If any changes are detected in the path the
            # 'changed' output will true. Enter multiple paths separated by spaces.
            change_path: "src"
            # If this is set to true, *every* commit will be treated as a new version.
            bump_each_commit: true
            # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
            search_commit_body: false
            # The output method used to generate list of users, 'csv' or 'json'.
            user_format_type: "csv"
            # Prevents pre-v1.0.0 version from automatically incrementing the major version.
            # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
            enable_prerelease_mode: true
        - run: |
            echo ${{ steps.tag_version_develop.outputs.version_tag }}
            echo ${{ steps.tag_version_develop.outputs.version_tag }}
